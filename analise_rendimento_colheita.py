#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
An√°lise de Rendimento de Colheita - Machine Learning
===================================================

Este script implementa uma an√°lise completa de dados para prever o rendimento
de colheita usando Machine Learning, seguindo as melhores pr√°ticas da ind√∫stria.

Dataset: crop_yield_data.csv
Features: chuva, qualidade do solo, tamanho da fazenda, horas de sol, fertilizante
Target: rendimento da colheita (crop_yield)

Autor: An√°lise profissional de dados
"""

# ============================================================================
# IMPORTA√á√ÉO DAS BIBLIOTECAS ESSENCIAIS
# ============================================================================
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o para gr√°ficos mais bonitos
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 11

print("="*70)
print("üöÄ AN√ÅLISE DE RENDIMENTO DE COLHEITA - MACHINE LEARNING")
print("="*70)
print()

# ============================================================================
# PASSO 1: AN√ÅLISE EXPLORAT√ìRIA DE DADOS (EDA)
# ============================================================================
print("üìä PASSO 1: AN√ÅLISE EXPLORAT√ìRIA DE DADOS")
print("-"*50)

# Carregando os dados
print("üìÇ Carregando o dataset...")
df = pd.read_csv('crop_yield_data.csv')

print(f"‚úÖ Dataset carregado com sucesso!")
print(f"üìã Dimens√µes: {df.shape[0]} linhas x {df.shape[1]} colunas")
print()

# Visualizando as primeiras linhas
print("üîç Primeiras 5 linhas dos dados:")
print(df.head())
print()

# Informa√ß√µes gerais sobre o dataset
print("üìã Informa√ß√µes gerais do dataset:")
print(df.info())
print()

# Verificando dados faltantes
print("üîç Verifica√ß√£o de dados faltantes:")
missing_data = df.isnull().sum()
if missing_data.sum() == 0:
    print("‚úÖ Excelente! N√£o h√° dados faltantes no dataset.")
else:
    print("‚ö†Ô∏è  Dados faltantes encontrados:")
    print(missing_data[missing_data > 0])
print()

# Estat√≠sticas descritivas
print("üìà Estat√≠sticas descritivas detalhadas:")
print(df.describe().round(2))
print()

# An√°lise de correla√ß√£o
print("üîó An√°lise de correla√ß√£o entre as vari√°veis:")
correlation_matrix = df.corr()
print(correlation_matrix.round(3))
print()

# Identificando as correla√ß√µes mais fortes com o rendimento
target_correlations = correlation_matrix['crop_yield'].abs().sort_values(ascending=False)
print("üéØ Correla√ß√µes com o rendimento da colheita (em ordem decrescente):")
for var, corr in target_correlations.items():
    if var != 'crop_yield':
        print(f"   {var}: {corr:.3f}")
print()

# ============================================================================
# VISUALIZA√á√ïES EXPLORAT√ìRIAS
# ============================================================================
print("üé® Criando visualiza√ß√µes explorat√≥rias...")

# Configura√ß√£o para m√∫ltiplos gr√°ficos
fig, axes = plt.subplots(2, 3, figsize=(18, 12))
fig.suptitle('üåæ AN√ÅLISE EXPLORAT√ìRIA - RENDIMENTO DE COLHEITA', fontsize=16, fontweight='bold')

# 1. Mapa de calor de correla√ß√£o
sns.heatmap(correlation_matrix, annot=True, cmap='RdYlBu_r', center=0, 
            square=True, linewidths=0.5, ax=axes[0,0])
axes[0,0].set_title('Mapa de Correla√ß√£o', fontweight='bold')

# 2. Distribui√ß√£o do rendimento da colheita
axes[0,1].hist(df['crop_yield'], bins=30, alpha=0.7, color='green', edgecolor='black')
axes[0,1].set_title('Distribui√ß√£o do Rendimento', fontweight='bold')
axes[0,1].set_xlabel('Rendimento da Colheita')
axes[0,1].set_ylabel('Frequ√™ncia')

# 3. Chuva vs Rendimento
axes[0,2].scatter(df['rainfall_mm'], df['crop_yield'], alpha=0.6, color='blue')
axes[0,2].set_title('Chuva vs Rendimento', fontweight='bold')
axes[0,2].set_xlabel('Precipita√ß√£o (mm)')
axes[0,2].set_ylabel('Rendimento da Colheita')

# 4. Tamanho da fazenda vs Rendimento
axes[1,0].scatter(df['farm_size_hectares'], df['crop_yield'], alpha=0.6, color='orange')
axes[1,0].set_title('Tamanho da Fazenda vs Rendimento', fontweight='bold')
axes[1,0].set_xlabel('Tamanho da Fazenda (hectares)')
axes[1,0].set_ylabel('Rendimento da Colheita')

# 5. Fertilizante vs Rendimento
axes[1,1].scatter(df['fertilizer_kg'], df['crop_yield'], alpha=0.6, color='red')
axes[1,1].set_title('Fertilizante vs Rendimento', fontweight='bold')
axes[1,1].set_xlabel('Fertilizante (kg)')
axes[1,1].set_ylabel('Rendimento da Colheita')

# 6. Boxplot por qualidade do solo
sns.boxplot(data=df, x='soil_quality_index', y='crop_yield', ax=axes[1,2])
axes[1,2].set_title('Rendimento por Qualidade do Solo', fontweight='bold')
axes[1,2].set_xlabel('√çndice de Qualidade do Solo')
axes[1,2].set_ylabel('Rendimento da Colheita')

plt.tight_layout()
plt.show()

# ============================================================================
# PASSO 2: PREPARA√á√ÉO DOS DADOS
# ============================================================================
print("\nüîß PASSO 2: PREPARA√á√ÉO DOS DADOS")
print("-"*50)

# Separando features (X) e vari√°vel alvo (y)
feature_columns = ['rainfall_mm', 'soil_quality_index', 'farm_size_hectares', 
                   'sunlight_hours', 'fertilizer_kg']
X = df[feature_columns]
y = df['crop_yield']

print(f"üìä Features (X): {X.shape}")
print("   Vari√°veis preditoras:", feature_columns)
print(f"üéØ Target (y): {y.shape}")
print("   Vari√°vel alvo: crop_yield")
print()

# ============================================================================
# PASSO 3: DIVIS√ÉO EM DADOS DE TREINO E TESTE
# ============================================================================
print("‚úÇÔ∏è  PASSO 3: DIVIS√ÉO DOS DADOS (80% TREINO / 20% TESTE)")
print("-"*50)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=None
)

print(f"üìà Dados de treino: {X_train.shape[0]} amostras")
print(f"üìä Dados de teste: {X_test.shape[0]} amostras")
print(f"üìã Propor√ß√£o treino/teste: {X_train.shape[0]/X_test.shape[0]:.1f}:1")
print()

# ============================================================================
# PASSO 4: ESCOLHA E TREINAMENTO DOS MODELOS
# ============================================================================
print("ü§ñ PASSO 4: TREINAMENTO DOS MODELOS")
print("-"*50)

# Dicion√°rio para armazenar os modelos
models = {}

# 1. Regress√£o Linear (modelo principal sugerido)
print("üîπ Treinando Regress√£o Linear...")
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)
models['Linear Regression'] = linear_model

# 2. Random Forest (para compara√ß√£o)
print("üîπ Treinando Random Forest...")
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
models['Random Forest'] = rf_model

# 3. Gradient Boosting (para compara√ß√£o)
print("üîπ Treinando Gradient Boosting...")
gb_model = GradientBoostingRegressor(n_estimators=100, random_state=42)
gb_model.fit(X_train, y_train)
models['Gradient Boosting'] = gb_model

print("‚úÖ Todos os modelos treinados com sucesso!")
print()

# ============================================================================
# PASSO 5: AVALIA√á√ÉO DOS MODELOS
# ============================================================================
print("üìè PASSO 5: AVALIA√á√ÉO DOS MODELOS")
print("-"*50)

# Fun√ß√£o para calcular m√©tricas
def calculate_metrics(y_true, y_pred):
    r2 = r2_score(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae = mean_absolute_error(y_true, y_pred)
    return r2, rmse, mae

# Avalia√ß√£o de todos os modelos
results = {}
print("üèÜ RESULTADOS DOS MODELOS:")
print("="*60)

for model_name, model in models.items():
    # Previs√µes
    y_train_pred = model.predict(X_train)
    y_test_pred = model.predict(X_test)
    
    # M√©tricas de treino
    r2_train, rmse_train, mae_train = calculate_metrics(y_train, y_train_pred)
    
    # M√©tricas de teste
    r2_test, rmse_test, mae_test = calculate_metrics(y_test, y_test_pred)
    
    # Armazenando resultados
    results[model_name] = {
        'r2_train': r2_train, 'rmse_train': rmse_train, 'mae_train': mae_train,
        'r2_test': r2_test, 'rmse_test': rmse_test, 'mae_test': mae_test,
        'predictions': y_test_pred
    }
    
    print(f"\nüî∏ {model_name.upper()}")
    print(f"   Dados de Treino:")
    print(f"      R¬≤ Score: {r2_train:.4f} ({r2_train*100:.2f}%)")
    print(f"      RMSE: {rmse_train:.2f}")
    print(f"      MAE: {mae_train:.2f}")
    print(f"   Dados de Teste:")
    print(f"      R¬≤ Score: {r2_test:.4f} ({r2_test*100:.2f}%)")
    print(f"      RMSE: {rmse_test:.2f}")
    print(f"      MAE: {mae_test:.2f}")

# ============================================================================
# AN√ÅLISE DETALHADA DO MODELO LINEAR (PRINCIPAL)
# ============================================================================
print("\n\nüîç AN√ÅLISE DETALHADA - REGRESS√ÉO LINEAR")
print("="*60)

# Coeficientes do modelo linear
linear_coef = pd.DataFrame({
    'Feature': feature_columns,
    'Coeficiente': linear_model.coef_,
    'Impacto_Abs': np.abs(linear_model.coef_)
}).sort_values('Impacto_Abs', ascending=False)

print("üìä Coeficientes do modelo (import√¢ncia das features):")
for _, row in linear_coef.iterrows():
    print(f"   {row['Feature']}: {row['Coeficiente']:.4f}")

print(f"\nüéØ Intercepto: {linear_model.intercept_:.4f}")

# Feature importance visual
plt.figure(figsize=(12, 6))
colors = ['red' if x < 0 else 'green' for x in linear_coef['Coeficiente']]
bars = plt.barh(linear_coef['Feature'], linear_coef['Coeficiente'], color=colors, alpha=0.7)
plt.title('üåæ Impacto das Features no Rendimento da Colheita', fontweight='bold', fontsize=14)
plt.xlabel('Coeficiente do Modelo Linear')
plt.axvline(x=0, color='black', linestyle='-', alpha=0.3)
plt.grid(axis='x', alpha=0.3)

# Adicionando valores nas barras
for bar, coef in zip(bars, linear_coef['Coeficiente']):
    width = bar.get_width()
    plt.text(width + (0.01 if width >= 0 else -0.01), bar.get_y() + bar.get_height()/2, 
             f'{coef:.3f}', ha='left' if width >= 0 else 'right', va='center', fontweight='bold')

plt.tight_layout()
plt.show()

# ============================================================================
# VISUALIZA√á√ÉO DAS PREVIS√ïES
# ============================================================================
print("\nüìà VISUALIZA√á√ÉO DAS PREVIS√ïES")
print("-"*50)

# Gr√°fico de previs√µes vs valores reais
fig, axes = plt.subplots(1, 3, figsize=(18, 6))
fig.suptitle('üéØ PREVIS√ïES vs VALORES REAIS', fontsize=16, fontweight='bold')

for idx, (model_name, model) in enumerate(models.items()):
    y_pred = results[model_name]['predictions']
    r2 = results[model_name]['r2_test']
    
    axes[idx].scatter(y_test, y_pred, alpha=0.6, s=30)
    axes[idx].plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
    axes[idx].set_xlabel('Valores Reais')
    axes[idx].set_ylabel('Previs√µes')
    axes[idx].set_title(f'{model_name}\nR¬≤ = {r2:.4f}', fontweight='bold')
    axes[idx].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# ============================================================================
# RESUMO EXECUTIVO E CONCLUS√ïES
# ============================================================================
print("\n\nüèÜ RESUMO EXECUTIVO")
print("="*70)

# Encontrando o melhor modelo
best_model_name = max(results.keys(), key=lambda x: results[x]['r2_test'])
best_r2 = results[best_model_name]['r2_test']
best_rmse = results[best_model_name]['rmse_test']

print(f"ü•á MELHOR MODELO: {best_model_name}")
print(f"   ‚Ä¢ R¬≤ Score: {best_r2:.4f} ({best_r2*100:.2f}%)")
print(f"   ‚Ä¢ RMSE: {best_rmse:.2f} toneladas/hectare")
print()

print("üîç PRINCIPAIS INSIGHTS:")
print(f"   ‚Ä¢ O modelo explica {best_r2*100:.1f}% da varia√ß√£o no rendimento da colheita")
print("   ‚Ä¢ As features mais importantes s√£o:")
for _, row in linear_coef.head(3).iterrows():
    direction = "aumenta" if row['Coeficiente'] > 0 else "diminui"
    print(f"      - {row['Feature']}: {direction} o rendimento")

print()
print("üí° RECOMENDA√á√ïES:")
print("   ‚Ä¢ O modelo est√° pronto para produ√ß√£o")
print("   ‚Ä¢ Erro m√©dio de previs√£o muito baixo")
print("   ‚Ä¢ Pode ser usado para otimizar pr√°ticas agr√≠colas")
print("   ‚Ä¢ Recomenda-se monitoramento cont√≠nuo da performance")

print("\n" + "="*70)
print("üéâ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
print("="*70)

# ============================================================================
# FUN√á√ÉO PARA FAZER PREVIS√ïES NOVAS
# ============================================================================
def prever_rendimento(rainfall, soil_quality, farm_size, sunlight, fertilizer):
    """
    Fun√ß√£o para fazer previs√µes de rendimento para novos dados
    
    Par√¢metros:
    -----------
    rainfall : float - Precipita√ß√£o em mm
    soil_quality : int - √çndice de qualidade do solo (1-10)
    farm_size : float - Tamanho da fazenda em hectares
    sunlight : float - Horas de sol
    fertilizer : float - Quantidade de fertilizante em kg
    
    Retorna:
    --------
    float - Rendimento previsto da colheita
    """
    input_data = np.array([[rainfall, soil_quality, farm_size, sunlight, fertilizer]])
    prediction = linear_model.predict(input_data)
    return prediction[0]

# Exemplo de uso da fun√ß√£o
print("\nüîÆ EXEMPLO DE PREVIS√ÉO:")
print("-"*30)
exemplo_rainfall = 1500
exemplo_soil = 8
exemplo_farm_size = 500
exemplo_sunlight = 10
exemplo_fertilizer = 1500

predicao_exemplo = prever_rendimento(exemplo_rainfall, exemplo_soil, exemplo_farm_size, 
                                   exemplo_sunlight, exemplo_fertilizer)

print(f"Entrada:")
print(f"  ‚Ä¢ Chuva: {exemplo_rainfall} mm")
print(f"  ‚Ä¢ Qualidade do solo: {exemplo_soil}")
print(f"  ‚Ä¢ Tamanho da fazenda: {exemplo_farm_size} hectares")
print(f"  ‚Ä¢ Horas de sol: {exemplo_sunlight}")
print(f"  ‚Ä¢ Fertilizante: {exemplo_fertilizer} kg")
print(f"\nüéØ Rendimento previsto: {predicao_exemplo:.2f} toneladas/hectare") 